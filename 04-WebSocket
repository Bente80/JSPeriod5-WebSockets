04- What is WebSocket protocol, how is it different from HTTP communication, what advantages it has over HTTP?

WebSocket is a protocol providing full-duplex communication channels (allows communication in both directions, and,
unlike half-duplex, allows this to happen simultaneously.) over a single TCP connection.
The WebSocket protocol was standardized by the IETF as RFC 6455 in 2011, and the WebSocket API in Web IDL is being
standardized by the W3C(World wide web).
WebSocket is designed to be implemented in web browsers and web servers, but it can be used by any client or server application.
The WebSocket Protocol is an independent TCP-based protocol. Its only relationship to HTTP is that its handshake is interpreted by
HTTP servers as an Upgrade request.[1] The WebSocket protocol makes more interaction between a browser and a website possible,
facilitating the real-time data transfer from and to the server. This is made possible by providing a standardized way for the server
to send content to the browser without being solicited by the client, and allowing for messages to be passed back and forth while
keeping the connection open. In this way a two-way (bi-directional) ongoing conversation can take place between a browser and the
server. The communications are done over TCP port number 80, which is of benefit for those environments which block non-web Internet
connections using a firewall. Similar two-way browser-server communications have been achieved in non-standardized ways using stopgap
technologies such as Comet.
The WebSocket protocol is currently supported in most major browsers including Google Chrome, Internet Explorer, Firefox, Safari and
Opera. WebSocket also requires web applications on the server to support it.

One difference is that WebSocket provides perform bi-directional, full-duplex communication unlike HTTP. This means that webSockets
allows communication in both directions, and,unlike half-duplex, allows this to happen simultaneously.).
Another difference is that WebSockets require full-duplex connections and new Web Socket servers to handle the protocol.
Furthermore WebSockets lack features such as automatic reconnection, event IDs, and the ability to send arbitrary events. These you
have to implement your self if wanted.

The advantage of the two-way channel that webSockets uses is in the cases where you need near real-time updates in both directions for
things like games and messaging apps. This is a possibility with webSockets where as with pooling it was not.
Furthermore it has an advantage as it has been built from the ground up for bidirectional capabilities with less overhead (headers).
This has a big impact on time if you transfers a great deal of data. Ex. if you needed to exchange a high throughput of messages from
both ends, with almost as much data flow upstream than downstream (e.g Massively Multiplayer Online Game that needs to keep all their
players in sync). WebSocket will remain a better choice.

Links:  https://en.wikipedia.org/wiki/WebSocket
        http://www.html5rocks.com/en/tutorials/eventsource/basics/
        http://www.infoq.com/articles/websocket-and-http2-coexist

